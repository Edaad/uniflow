{"ast":null,"code":"const express = require('express');\nconst multer = require('multer');\nconst cors = require('cors'); // Import cors\nconst path = require('path');\nconst app = express();\nconst PORT = 5000;\n\n// Use CORS middleware\napp.use(cors()); // This will enable CORS for all routes\n\n// Set up storage for multer to save files in 'uploads' folder\nconst storage = multer.diskStorage({\n  destination: './uploads',\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + path.extname(file.originalname));\n  }\n});\n\n// Init upload with multer\nconst upload = multer({\n  storage\n}).single('file');\n\n// Set up a simple route for file upload\napp.post('/upload', (req, res) => {\n  upload(req, res, err => {\n    if (err) {\n      return res.status(500).json({\n        message: 'File upload failed',\n        error: err\n      });\n    }\n    res.status(200).json({\n      message: 'File uploaded successfully!'\n    });\n  });\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","multer","cors","path","app","PORT","use","storage","diskStorage","destination","filename","req","file","cb","Date","now","extname","originalname","upload","single","post","res","err","status","json","message","error","listen","console","log"],"sources":["/Users/edaad/Desktop/Projects/uniflow/client/src/FileUpload.js"],"sourcesContent":["const express = require('express');\nconst multer = require('multer');\nconst cors = require('cors');  // Import cors\nconst path = require('path');\nconst app = express();\nconst PORT = 5000;\n\n// Use CORS middleware\napp.use(cors());  // This will enable CORS for all routes\n\n// Set up storage for multer to save files in 'uploads' folder\nconst storage = multer.diskStorage({\n    destination: './uploads',\n    filename: (req, file, cb) => {\n        cb(null, Date.now() + path.extname(file.originalname));\n    }\n});\n\n// Init upload with multer\nconst upload = multer({ storage }).single('file');\n\n// Set up a simple route for file upload\napp.post('/upload', (req, res) => {\n    upload(req, res, (err) => {\n        if (err) {\n            return res.status(500).json({ message: 'File upload failed', error: err });\n        }\n        res.status(200).json({ message: 'File uploaded successfully!' });\n    });\n});\n\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;AAC/B,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAG,IAAI;;AAEjB;AACAD,GAAG,CAACE,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE;;AAElB;AACA,MAAMK,OAAO,GAAGN,MAAM,CAACO,WAAW,CAAC;EAC/BC,WAAW,EAAE,WAAW;EACxBC,QAAQ,EAAEA,CAACC,GAAG,EAAEC,IAAI,EAAEC,EAAE,KAAK;IACzBA,EAAE,CAAC,IAAI,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGZ,IAAI,CAACa,OAAO,CAACJ,IAAI,CAACK,YAAY,CAAC,CAAC;EAC1D;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMC,MAAM,GAAGjB,MAAM,CAAC;EAAEM;AAAQ,CAAC,CAAC,CAACY,MAAM,CAAC,MAAM,CAAC;;AAEjD;AACAf,GAAG,CAACgB,IAAI,CAAC,SAAS,EAAE,CAACT,GAAG,EAAEU,GAAG,KAAK;EAC9BH,MAAM,CAACP,GAAG,EAAEU,GAAG,EAAGC,GAAG,IAAK;IACtB,IAAIA,GAAG,EAAE;MACL,OAAOD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE,oBAAoB;QAAEC,KAAK,EAAEJ;MAAI,CAAC,CAAC;IAC9E;IACAD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA8B,CAAC,CAAC;EACpE,CAAC,CAAC;AACN,CAAC,CAAC;AAEFrB,GAAG,CAACuB,MAAM,CAACtB,IAAI,EAAE,MAAM;EACnBuB,OAAO,CAACC,GAAG,CAAC,6BAA6BxB,IAAI,EAAE,CAAC;AACpD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}