{"ast":null,"code":"var _jsxFileName = \"/Users/edaad/Desktop/Projects/uniflow/client/src/FileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile);\n  };\n  const handleUpload = async () => {\n    if (!file) {\n      setMessage(\"No file selected\");\n      return;\n    }\n\n    // Prepare the form data to send the file\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch('http://localhost:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(data.message);\n      } else {\n        setMessage(data.error || \"File upload failed\");\n      }\n    } catch (err) {\n      setMessage(\"Error uploading file\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"File Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(FileUpload, \"90rxx89DAeVfO1aRLt0hivI8MC0=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FileUpload","_s","file","setFile","message","setMessage","handleFileChange","e","selectedFile","target","files","handleUpload","formData","FormData","append","response","fetch","method","body","data","json","ok","error","err","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/edaad/Desktop/Projects/uniflow/client/src/FileUpload.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst FileUpload = () => {\n    const [file, setFile] = useState(null);\n    const [message, setMessage] = useState(\"\");\n\n    const handleFileChange = (e) => {\n        const selectedFile = e.target.files[0];\n        setFile(selectedFile);\n    };\n\n    const handleUpload = async () => {\n        if (!file) {\n            setMessage(\"No file selected\");\n            return;\n        }\n\n        // Prepare the form data to send the file\n        const formData = new FormData();\n        formData.append('file', file);\n\n        try {\n            const response = await fetch('http://localhost:5000/upload', {\n                method: 'POST',\n                body: formData,\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                setMessage(data.message);\n            } else {\n                setMessage(data.error || \"File upload failed\");\n            }\n        } catch (err) {\n            setMessage(\"Error uploading file\");\n        }\n    };\n\n    return (\n        <div>\n            <h2>File Upload</h2>\n            <input type=\"file\" onChange={handleFileChange} />\n            <button onClick={handleUpload}>Upload</button>\n            {message && <p>{message}</p>}\n        </div>\n    );\n};\n\nexport default FileUpload;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMS,gBAAgB,GAAIC,CAAC,IAAK;IAC5B,MAAMC,YAAY,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACtCP,OAAO,CAACK,YAAY,CAAC;EACzB,CAAC;EAED,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACT,IAAI,EAAE;MACPG,UAAU,CAAC,kBAAkB,CAAC;MAC9B;IACJ;;IAEA;IACA,MAAMO,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEZ,IAAI,CAAC;IAE7B,IAAI;MACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QACzDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACV,CAAC,CAAC;MAEF,MAAMO,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAIL,QAAQ,CAACM,EAAE,EAAE;QACbhB,UAAU,CAACc,IAAI,CAACf,OAAO,CAAC;MAC5B,CAAC,MAAM;QACHC,UAAU,CAACc,IAAI,CAACG,KAAK,IAAI,oBAAoB,CAAC;MAClD;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVlB,UAAU,CAAC,sBAAsB,CAAC;IACtC;EACJ,CAAC;EAED,oBACIN,OAAA;IAAAyB,QAAA,gBACIzB,OAAA;MAAAyB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB7B,OAAA;MAAO8B,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAExB;IAAiB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjD7B,OAAA;MAAQgC,OAAO,EAAEpB,YAAa;MAAAa,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC7CxB,OAAO,iBAAIL,OAAA;MAAAyB,QAAA,EAAIpB;IAAO;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEd,CAAC;AAAC3B,EAAA,CA7CID,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AA+ChB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}